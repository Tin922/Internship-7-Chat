// <auto-generated />
using System;
using Chat.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Chat.Data.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    [Migration("20240103141727_Seed")]
    partial class Seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Chat.Data.Entities.Models.DirectMessage", b =>
                {
                    b.Property<int>("DirectMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DirectMessageId"));

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DirectMessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("DirectMessages");

                    b.HasData(
                        new
                        {
                            DirectMessageId = 1,
                            ReceiverId = 2,
                            SenderId = 1,
                            Text = "Bok",
                            Timestamp = new DateTime(2023, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DirectMessageId = 2,
                            ReceiverId = 1,
                            SenderId = 2,
                            Text = "Bok, Luka",
                            Timestamp = new DateTime(2023, 1, 1, 18, 5, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            GroupId = 1,
                            Name = "General"
                        },
                        new
                        {
                            GroupId = 2,
                            Name = "Dev"
                        });
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.GroupMessage", b =>
                {
                    b.Property<int>("GroupMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GroupMessageId"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GroupMessageId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SenderId");

                    b.ToTable("GroupMessages");

                    b.HasData(
                        new
                        {
                            GroupMessageId = 1,
                            GroupId = 1,
                            SenderId = 1,
                            Text = "Prva poruka u grupi",
                            Timestamp = new DateTime(2023, 1, 1, 20, 1, 1, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            GroupMessageId = 2,
                            GroupId = 1,
                            SenderId = 2,
                            Text = "Bok, Luka",
                            Timestamp = new DateTime(2023, 1, 1, 20, 1, 2, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            GroupMessageId = 3,
                            GroupId = 2,
                            SenderId = 1,
                            Text = "Ovo je dev kanal",
                            Timestamp = new DateTime(2023, 1, 1, 21, 1, 2, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            GroupMessageId = 4,
                            GroupId = 2,
                            SenderId = 2,
                            Text = "Pozdrav",
                            Timestamp = new DateTime(2023, 1, 1, 21, 2, 2, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.GroupUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupUsers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            GroupId = 1
                        },
                        new
                        {
                            UserId = 2,
                            GroupId = 1
                        },
                        new
                        {
                            UserId = 3,
                            GroupId = 1
                        },
                        new
                        {
                            UserId = 1,
                            GroupId = 2
                        },
                        new
                        {
                            UserId = 2,
                            GroupId = 2
                        });
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "luka@gmail.com",
                            IsAdmin = false,
                            Password = "luka"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "mate@gmail.com",
                            IsAdmin = false,
                            Password = "mate"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "sime@gmail.com",
                            IsAdmin = true,
                            Password = "sime"
                        });
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.DirectMessage", b =>
                {
                    b.HasOne("Chat.Data.Entities.Models.User", "Receiver")
                        .WithMany("ReceivedDirectMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Data.Entities.Models.User", "Sender")
                        .WithMany("SentDirectMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.Group", b =>
                {
                    b.HasOne("Chat.Data.Entities.Models.User", null)
                        .WithMany("Groups")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.GroupMessage", b =>
                {
                    b.HasOne("Chat.Data.Entities.Models.Group", "Group")
                        .WithMany("GroupMessages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Data.Entities.Models.User", "Sender")
                        .WithMany("SentGroupMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.GroupUser", b =>
                {
                    b.HasOne("Chat.Data.Entities.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Data.Entities.Models.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.Group", b =>
                {
                    b.Navigation("GroupMessages");

                    b.Navigation("GroupUsers");
                });

            modelBuilder.Entity("Chat.Data.Entities.Models.User", b =>
                {
                    b.Navigation("GroupUsers");

                    b.Navigation("Groups");

                    b.Navigation("ReceivedDirectMessages");

                    b.Navigation("SentDirectMessages");

                    b.Navigation("SentGroupMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
